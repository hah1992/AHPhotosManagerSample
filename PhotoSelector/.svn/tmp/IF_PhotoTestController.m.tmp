//
//  IF_PhotoTestController.m
//  IFAPP
//
//  Created by hah on 16/5/13.
//  Copyright © 2016年 IFfashion. All rights reserved.
//

#import "IF_PhotoTestController.h"

@import AssetsLibrary;
@import Photos;
#import "Masonry.h"
#import "AlbumModel.h"
#import "PhotoModel.h"
#import "PhotoCell.h"
#import "PhotoDetailView.h"
#import "AlbumLisetView.h"
#import "PublishViewController.h"
#import "LC_UIHud.h"

#import "IFPhotosManager.h"

@interface IF_PhotoTestController ()<UIAlertViewDelegate, UICollectionViewDataSource, UICollectionViewDelegate,UICollectionViewDelegateFlowLayout, UIImagePickerControllerDelegate,UINavigationControllerDelegate,PHPhotoLibraryChangeObserver, AlbumListDelegate>

@property (strong, nonatomic) UICollectionView *collectionView;
@property (strong, nonatomic) UICollectionViewFlowLayout *flowLayout;
@property (strong, nonatomic) AlbumLisetView *albumList;
@property (strong, nonatomic) LC_UIHud *hud;
@property (weak, nonatomic) UIButton *nextBtn;
@property (weak, nonatomic) UIButton *titleBtn;

@property (nonatomic, strong) PHImageManager *imageManager;
@property (strong, nonatomic) PHCachingImageManager *cachingManager;
@property (strong, nonatomic) ALAssetsLibrary *library;
@property (strong, nonatomic) NSMutableArray  *albums;
@property (strong, nonatomic) PhotoDetailView *detailView;
@property (strong, nonatomic) AlbumModel *album;
@property (strong, nonatomic) PHFetchResult *selectedResult;

@property (strong, nonatomic) UIImage *selectedImg;
@property (assign, nonatomic) NSInteger selectedIndex;
@property (assign, nonatomic) BOOL isPopUp;
@property (assign, nonatomic) BOOL isFromCam;
@property (assign, nonatomic) CGRect previousPreheatRect;

@property (nonatomic, strong) MASConstraint *albumListTop;
@end


static CGFloat const space = 5;   //titleBtn的label和image的间距
static CGFloat const PhotonMargin = 4;
static NSString * const NoAlbumAuthorization = @"未能获取相册权限，请前往设置-隐私-照片设置权限";
static NSString * const NoCameraAuthorization = @"未能获取相机权限，请前往设置-隐私-相机设置权限";
static NSString * const Cam_Unable = @"您的设备不支持拍照功能";
static NSString * const reusedID = @"Photo_Reused";
static NSString * const reusedHeader = @"Photo_Detail";

static NSInteger const iOS7AlertTag_Cam = 10001;
static NSInteger const iOS7AlertTag_Lib = 10002;

static CGSize AssetGridThumbnailSize;

@implementation IF_PhotoTestController

#pragma mark - lazy load
- (NSMutableArray *)albums{
    if (!_albums) {
        _albums = [NSMutableArray array];
    }
    return _albums;
}

- (PhotoDetailView *)detailView {
    if (!_detailView) {
        _detailView = [[PhotoDetailView alloc] initWithFrame:CGRectMake(0, 0, LC_DEVICE_WIDTH, 300)];
    }
    return _detailView;
}

- (AlbumLisetView *)albumList {
    if (!_albumList) {
        _albumList = [[AlbumLisetView alloc] initWithFrame:CGRectZero];
        _albumList.delegate = self;
    }
    return _albumList;
}

- (void)setIsPopUp:(BOOL)isPopUp{
    self.titleBtn.selected = isPopUp;
    _isPopUp = isPopUp;
}

#pragma mark - initialize
- (void)viewDidLoad {
    [super viewDidLoad];
    self.hud = [[LC_UIHud alloc] init];
    self.library = [[ALAssetsLibrary alloc] init];
    self.cachingManager = [PHCachingImageManager defaultManager];
    self.selectedIndex = 0;
    [[PHPhotoLibrary sharedPhotoLibrary] registerChangeObserver:self];
    
    [self addSubViews];
    
<<<<<<< .mine
    [[IFPhotosManager defaultManager] fetchAllAlbumsWithCompletionHanler:^(NSArray<AlbumModel *> *ablums) {
        self.albumList.albums = self.albums;
        [self.albumList.tableView reloadData];
    } failAcion:nil];
=======
//    [[IFPhotosManager defaultManager] fetchAlbumsWithCompletionHanler:^(NSArray<AlbumModel *> *ablums) {
//        self.albumList.albums = self.albums;
//        [self.albumList.tableView reloadData];
//    } failAcion:nil];
>>>>>>> .r675
    
    [self.collectionView registerClass:[UICollectionReusableView class] forSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:reusedHeader];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    CGFloat scale = [UIScreen mainScreen].scale;
    CGSize cellSize = ((UICollectionViewFlowLayout *)self.collectionView.collectionViewLayout).itemSize;
    AssetGridThumbnailSize = CGSizeMake(cellSize.width * scale, cellSize.height * scale);
    if (IOS8_OR_LATER) {
        [self showAllPhotosInResult:self.selectedResult];
    } else {
        [self showAllPhotosInGroup:self.album.group];
    }
    
    
    [self showDetailImageAtIndex:self.selectedIndex];
    [self.collectionView reloadData];
}

- (void) addSubViews {
    [self.view addSubview:self.collectionView];
    [self.collectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(self.view).offset(0);
    }];
    
    [self.view addSubview:self.albumList];
    [self.albumList mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.mas_equalTo(0);
        make.height.equalTo(@(kAdaptedHeight(385)));
        self.albumListTop =  make.top.mas_equalTo(-400);
    }];
    
    [self addNextButton];
    [self addSelectedAlbumBtn];
    [self addCancelButton];
}

- (void)addNextButton {
    UIButton *next = [UIButton buttonWithType:UIButtonTypeCustom];
    [next setTitle:@"继续" forState:UIControlStateNormal];
    [next setTitleColor:[UIColor colorWithHexString:@"62a6b0"] forState:UIControlStateNormal];
    next.titleLabel.font = IF_FONT(15);
    [next sizeToFit];
//    [next addTarget:self action:@selector(nextAction) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem * right = [[UIBarButtonItem alloc] initWithCustomView:next];
    self.navigationItem.rightBarButtonItem = right;
    self.nextBtn = next;
}

- (void)addSelectedAlbumBtn{
    UIButton *titleBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    titleBtn.frame = CGRectMake(0, 0, 150, 20);
    [titleBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    titleBtn.titleLabel.font = IF_FONT_B(16);
    [titleBtn setImage:[UIImage imageNamed:@"icon-arrow.png"] forState:UIControlStateNormal];
    [titleBtn setImage:[UIImage imageNamed:@"icon-arrow-up.png"] forState:UIControlStateSelected];
    
    [titleBtn addTarget:self action:@selector(popUpCollectionList:) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.titleView = titleBtn;
    
    self.titleBtn = titleBtn;
    [self setTitleEdgeInsets:@"相机胶卷"];
}

- (void)addCancelButton {
    UIButton *cancel = [UIButton buttonWithType:UIButtonTypeCustom];
    [cancel setTitle:@"取消" forState:UIControlStateNormal];
    [cancel setTitleColor:[UIColor colorWithHexString:@"#999999"] forState:UIControlStateNormal];
    cancel.titleLabel.font = IF_FONT(15);
    [cancel sizeToFit];
    [cancel addTarget:self action:@selector(cancelAction) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem *left = [[UIBarButtonItem alloc] initWithCustomView:cancel];
    self.navigationItem.leftBarButtonItem = left;
}


#pragma mark - navigation bar buton action

- (void)setTitleEdgeInsets:(NSString *)title{
    
    [self.titleBtn setTitle:title forState:UIControlStateNormal];
    
    CGFloat labelWidth = [title sizeWithFont:IF_FONT_B(16) byWidth:LC_DEVICE_WIDTH].width;
    CGFloat imageWidth = self.titleBtn.imageView.image.size.width;
    
    self.titleBtn.imageEdgeInsets = UIEdgeInsetsMake(0, labelWidth + 3*space, 0, -(labelWidth + 3*space));
    self.titleBtn.titleEdgeInsets = UIEdgeInsetsMake(0, -(imageWidth + 3*space), 0, imageWidth + 3*space);
    self.titleBtn.contentEdgeInsets = UIEdgeInsetsMake(0, 3*space, 0, 3*space);
}

- (void)popUpCollectionList:(UIButton *)sender {
    
    self.isPopUp = ! self.isPopUp;
    
    if (self.isPopUp) {
        [self showAlbumList];
    }else {
        [self hideAlbumList];
    }
}

- (void) showAlbumList {
    [UIView animateWithDuration:0.3 delay:0 usingSpringWithDamping:1 initialSpringVelocity:0.3 options:UIViewAnimationOptionCurveEaseInOut animations:^{
        self.albumListTop.offset(64);
        [self.view layoutIfNeeded];
    } completion:nil];
}

- (void)hideAlbumList {
    [UIView animateWithDuration:0.5 delay:0 usingSpringWithDamping:0.8 initialSpringVelocity:0.3 options:UIViewAnimationOptionCurveEaseInOut animations:^{
        self.albumListTop.offset(-400);
    } completion:^(BOOL finished) {
        self.isPopUp = NO;
    }];
}



- (void)cancelAction {
    [self dismiss];
}

- (void)dismiss{
    [self dismissViewControllerAnimated:YES completion:nil];
}

#pragma mark - show groups pictures

- (void)showWarningWithAlertTag:(NSInteger)tag message:(NSString *)warning action:(void (^)(UIAlertAction *action))anAction {
    if ([[UIDevice currentDevice].systemVersion doubleValue] < 8.0) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:warning delegate:self cancelButtonTitle:@"好的" otherButtonTitles:nil];
        alert.tag = tag;
        alert.delegate = self;
        [alert show];
    }else {
        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"提示" message:warning preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *OK = [UIAlertAction actionWithTitle:@"好的" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
            if (anAction) {
                anAction(action);
            }
        }];
        [alertController addAction:OK];
        [self presentViewController:alertController animated:YES completion:nil];
    }
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{
    if (alertView.tag == iOS7AlertTag_Lib) {
        [self dismiss];
    }
}

- (void)fetchAlbums {
    if (IOS8_OR_LATER) {
        [self getAlbumsFromPhotos];
        [self showDetailImageAtIndex:0];
    }else {
        [self getAlbumsFromALAssetLibrary];
    }
}

//TODO:优化列表头图
- (void)getAlbumsFromPhotos{
    PHFetchOptions *camOption = [PHFetchOptions new];
    camOption.sortDescriptors = @[[NSSortDescriptor sortDescriptorWithKey:@"creationDate" ascending:NO]];
    PHFetchResult *camRoll = [PHAsset fetchAssetsWithOptions:camOption];
    AlbumModel *album = [[AlbumModel alloc] init];
    album.albumName = @"相机胶卷";
    album.photoCount = camRoll.count;
    album.fetchResult = camRoll;
    
    PHImageRequestOptions *imgReqOptions = [[PHImageRequestOptions alloc] init];
    imgReqOptions.deliveryMode = PHImageRequestOptionsDeliveryModeFastFormat;
    imgReqOptions.synchronous = YES;
    [self requestImageAtIndex:0 forRequest:camRoll targetSize:AssetGridThumbnailSize contentMode:PHImageContentModeAspectFill options:nil requestHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) {
        album.postImage = result;
    }];
    [self.albums addObject:album];
    self.selectedResult = camRoll;
    
    PHFetchOptions *userAlbumsOptions = [PHFetchOptions new];
    userAlbumsOptions.predicate = [NSPredicate predicateWithFormat:@"estimatedAssetCount > 0"];
    PHFetchResult *userAlbums = [PHAssetCollection fetchAssetCollectionsWithType:PHAssetCollectionTypeAlbum subtype:PHAssetCollectionSubtypeAny options:userAlbumsOptions];
    [userAlbums enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        if (![obj isKindOfClass:[PHAssetCollection class]]) { return; }
        PHAssetCollection *assetCollection = (PHAssetCollection *)obj;
        AlbumModel *album = [[AlbumModel alloc] init];
        album.albumName = assetCollection.localizedTitle;
        PHFetchResult *cusmtomAlbum = [PHAsset fetchKeyAssetsInAssetCollection:(PHAssetCollection *)obj options:nil];
        album.fetchResult = cusmtomAlbum;
        album.photoCount = cusmtomAlbum.count;
        [self requestImageAtIndex:0 forRequest:cusmtomAlbum targetSize:AssetGridThumbnailSize contentMode:PHImageContentModeAspectFill options:imgReqOptions requestHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) {
            album.postImage = result;
        }];
        [self.albums addObject:album];
    }];
    
    self.albumList.albums = self.albums;
    [self.albumList.tableView reloadData];
}

- (void)requestImageAtIndex:(NSUInteger)idx forRequest:(PHFetchResult *)request targetSize:(CGSize)targetSize contentMode:(PHImageContentMode)contentMode options:(PHImageRequestOptions *)options requestHandler:(void (^)(UIImage * _Nullable result, NSDictionary * _Nullable info)) handler{
    if (request.count <= 0) {
        return;
    }
    PHAsset *asset = request[idx];
    [self.cachingManager requestImageForAsset:asset targetSize:targetSize contentMode:contentMode options:options resultHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) {
        if (!result) { return; }
        if (handler) { handler(result,info); }
    }];
}

- (void)getAlbumsFromALAssetLibrary{
    __weak typeof(self) weakSelf = self;
    ALAssetsLibraryGroupsEnumerationResultsBlock success = ^(ALAssetsGroup *group, BOOL *stop){
        //检索相册结束
        if (!group) {
            [weakSelf.hud hide];
            weakSelf.album = weakSelf.albums.lastObject;
            weakSelf.albumList.albums = weakSelf.albums;
            [weakSelf showAllPhotosInGroup:weakSelf.album.group];
            dispatch_async(dispatch_get_main_queue(), ^{
                [weakSelf.collectionView reloadData];
                [weakSelf.albumList.tableView reloadData];
                [weakSelf showDetailImageAtIndex:0];
            });
            *stop = YES;
            return;
        }
        
        NSString *name = [group valueForProperty:ALAssetsGroupPropertyName];
        if (group.numberOfAssets > 0) {
            [group setAssetsFilter:[ALAssetsFilter allPhotos]];
            AlbumModel *album = [[AlbumModel alloc] init];
            album.group = group;
            album.albumName = name;
            album.postImage = [UIImage imageWithCGImage:group.posterImage];
            album.photoCount = group.numberOfAssets;
            [weakSelf.albums addObject:album];
        }
    };
    
    ALAssetsLibraryAccessFailureBlock fail = ^(NSError *error) {
        [weakSelf showWarningWithAlertTag:iOS7AlertTag_Lib message:NoAlbumAuthorization action:^(UIAlertAction *action) {
            [weakSelf dismiss];
        }];
    };
    
    [self.library enumerateGroupsWithTypes:ALAssetsGroupSavedPhotos|ALAssetsGroupAlbum|ALAssetsGroupEvent  usingBlock:success failureBlock:fail];
}

- (void)showDetailImageAtIndex:(NSInteger) index{
    BOOL moreThanMax = IOS8_OR_LATER ? index >= self.selectedResult.count : index >= self.album.photos.count;
    if (index < 0 || moreThanMax) { return; }
    
    __block UIImage *detailImg;
    if (IOS8_OR_LATER) {
        PHImageRequestOptions *imgReqOptions = [[PHImageRequestOptions alloc] init];
        imgReqOptions.deliveryMode = PHImageRequestOptionsDeliveryModeHighQualityFormat;
        [self requestImageAtIndex:index forRequest:self.selectedResult targetSize:CGSizeMake(AssetGridThumbnailSize.width*5, AssetGridThumbnailSize.height*5) contentMode:PHImageContentModeAspectFit options:imgReqOptions requestHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) {
            detailImg = result;
            self.selectedImg = detailImg;
            [self.detailView showDetail:detailImg];
        }];
    } else {
        ALAssetsGroup *group = self.album.group;
        @autoreleasepool {
            [self.album.group enumerateAssetsWithOptions:NSEnumerationReverse usingBlock:^(ALAsset *result, NSUInteger index, BOOL *stop) {
                //倒序检索，需要与当前选择cell的index对应
                NSInteger idx = [group numberOfAssets] - 1 - index;
                if (idx == self.selectedIndex) {
                    PhotoModel *photo = self.album.photos[idx];
                    CGImageRef detail = result.defaultRepresentation.fullScreenImage;
                    photo.image = [UIImage imageWithCGImage:detail scale:0.1 orientation:UIImageOrientationUp];
                    detailImg = photo.image;
                    //检索到当前选中的图片详情后跳出检索
                    *stop = YES;
                }
            }];
        }
        self.selectedImg = detailImg;
        [self.detailView showDetail:detailImg];
    }
}

- (void)showAllPhotosInGroup:(ALAssetsGroup *)group {
    self.hud = [self showLoadingHud:@"正在加载"];
    __block NSMutableArray *array = [NSMutableArray array];
    [group enumerateAssetsWithOptions:NSEnumerationReverse usingBlock:^(ALAsset *result, NSUInteger index, BOOL *stop) {
        
        NSString *photoType = [result valueForProperty:ALAssetPropertyType];
        
        if (![photoType isEqualToString:ALAssetTypePhoto]) return;
        
        PhotoModel *photo = [PhotoModel new];
        photo.thumb = [UIImage imageWithCGImage:result.thumbnail];
        //只取出相册中的第一张照片显示
        if (index == group.numberOfAssets-1) {
            CGImageRef detail = result.defaultRepresentation.fullScreenImage;
            photo.image = [UIImage imageWithCGImage:detail scale:0.1 orientation:UIImageOrientationUp];
        }
        
        photo.asset = result;
        [array addObject:photo];
    }];
    self.album.photos = array;
    [self.hud hide];
}

- (void)showAllPhotosInResult:(PHFetchResult *)fetchResult{
    self.hud = [self showLoadingHud:@"正在加载"];
    self.selectedResult = fetchResult;
    [self.hud hide];
}

#pragma mark - image picker

- (void)wakeUpCamera{
    
    AVAuthorizationStatus authoState = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
    if (authoState == AVAuthorizationStatusDenied || authoState == AVAuthorizationStatusRestricted) {
        [self showWarningWithAlertTag:iOS7AlertTag_Cam message:NoCameraAuthorization action:^(UIAlertAction *action) {
            PhotoCell *cell = (PhotoCell *)[self.collectionView cellForItemAtIndexPath:[NSIndexPath indexPathForRow:1 inSection:0]];
            cell.selected = YES;
        }];
        return;
    }
    
    BOOL cameraType = [UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera];
    if (!cameraType) {
        [self showWarningWithAlertTag:iOS7AlertTag_Lib message:@"该设备不支持拍照功能" action:^(UIAlertAction *action){
            PhotoCell *cell = (PhotoCell *)[self.collectionView cellForItemAtIndexPath:[NSIndexPath indexPathForRow:1 inSection:0]];
            cell.selected = YES;
        }];
        return;
    }
    
    UIImagePickerController *pickerController = [[UIImagePickerController alloc] init];
    pickerController.delegate = self;
    pickerController.sourceType = UIImagePickerControllerSourceTypeCamera;
    pickerController.cameraCaptureMode = UIImagePickerControllerCameraCaptureModePhoto;
    pickerController.cameraDevice = UIImagePickerControllerCameraDeviceRear;
    pickerController.cameraFlashMode = UIImagePickerControllerCameraFlashModeAuto;
    pickerController.showsCameraControls = YES;
    
    [self presentViewController:pickerController animated:YES completion:nil];
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info {
    
    void (^completion)() = ^{
        if (![info[UIImagePickerControllerMediaType] isEqualToString:@"public.image"])  return;
        
        UIImage *image = info[UIImagePickerControllerOriginalImage];
        [self.detailView showDetail:image];
        self.selectedImg = image;
        self.selectedIndex = 0;
        //确认选择后将照片存入相册
        dispatch_async(dispatch_get_global_queue(0, 0), ^{
            ALAssetsLibrary *library = [ALAssetsLibrary new];
            [library writeImageDataToSavedPhotosAlbum:UIImageJPEGRepresentation(image, 0.5) metadata:nil completionBlock:nil];
        });
        
        //解决拍照后图片会向左转９０度的问题
        UIImageOrientation imageOrientation=image.imageOrientation;
        if(imageOrientation!=UIImageOrientationUp){
            UIGraphicsBeginImageContext(image.size);
            [image drawInRect:CGRectMake(0, 0, image.size.width, image.size.height)];
            image = UIGraphicsGetImageFromCurrentImageContext();
            UIGraphicsEndImageContext();
        }
//        [self .navigationController pushViewController:publish animated:YES];
    };
    
    [picker dismissViewControllerAnimated:YES completion:completion];
}


#pragma mark - collectionView dataSource, delegate, flowLayout

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    
    if (self.albums.count == 0) {
        return 1;
    }
    //第一个cell为拍照
    return (IOS8_OR_LATER ? self.selectedResult.count : self.album.photos.count) + 1;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    
    PhotoCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:reusedID forIndexPath:indexPath];
    if (!cell) {
        cell = [[PhotoCell alloc] initWithFrame:CGRectZero];
    }
    if (indexPath.row == 0) {
        [cell loadImage:[UIImage imageNamed:@"but-camera"]];
        return  cell;
    }
    if (indexPath.row == self.selectedIndex+1) {
        cell.selected = YES;
    }
    
    if (IOS8_OR_LATER) {
        [self requestImageAtIndex:indexPath.item-1 forRequest:self.selectedResult targetSize:AssetGridThumbnailSize contentMode:PHImageContentModeAspectFill options:nil requestHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) {
            dispatch_async(dispatch_get_main_queue(), ^{
                [cell loadImage:result];
            });
        }];
    }else {
        PhotoModel *photo = self.album.photos[indexPath.row-1];
        [cell loadImage:photo.thumb];
    }
    
    return cell;
}

- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath {
    
    UICollectionReusableView *reuseView;
    if ([kind isEqualToString:UICollectionElementKindSectionHeader]) {
        reuseView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:reusedHeader forIndexPath:indexPath];
        if (![reuseView.subviews containsObject:[reuseView viewWithTag:1000]]) {
            [reuseView addSubview:self.detailView];
        }
        
        return reuseView;
    }
    
    return [[UICollectionReusableView alloc] init];
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section {
    return CGSizeMake(LC_DEVICE_WIDTH, 300);
}

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    [self hideAlbumList];
    if (indexPath.row == 0) {
        [self wakeUpCamera];
        return;
    }
    
    PhotoCell *currentCell = (PhotoCell *)[collectionView cellForItemAtIndexPath:indexPath];
    PhotoCell *preCell = (PhotoCell *)[collectionView cellForItemAtIndexPath:[NSIndexPath indexPathForRow:self.selectedIndex+1 inSection:0]];
    if (indexPath.row > 0) {
        currentCell.selected = YES;
        preCell.selected = NO;
    }
    self.selectedIndex = indexPath.row-1;
    [self showDetailImageAtIndex:self.selectedIndex];
    [self.collectionView setContentOffset:CGPointMake(0, -64) animated:YES];
}

- (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(nonnull UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section {
    return UIEdgeInsetsMake(PhotonMargin, PhotonMargin, PhotonMargin, PhotonMargin);
}


#pragma mark - albumList selected delegate

- (void)albumList:(UITableView *)list didSelectedTableviewCellAtIndexPath:(NSIndexPath *)indexPath {
    NSInteger index = IOS8_OR_LATER ? indexPath.row : self.albums.count-1 - indexPath.row;
    
    AlbumModel *album = self.albums[index];
    self.album = album;
    //重置当前选中的照片
    self.selectedIndex = 0;
    self.titleBtn.selected = NO;
    NSString *title = album.albumName.length >= 10 ? [album.albumName substringToIndex:10] : album.albumName;
    [self setTitleEdgeInsets:title];
    if (IOS8_OR_LATER) {
        [self showAllPhotosInResult:self.album.fetchResult];
    } else {
        [self showAllPhotosInGroup:self.album.group];
    }
    [self showDetailImageAtIndex:0];
    [self.collectionView reloadData];
    [self hideAlbumList];
}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {
    if (_isPopUp) {
        [self hideAlbumList];
    }
}


#pragma mark - Asset change

- (void)photoLibraryDidChange:(PHChange *)changeInstance {
    // Check if there are changes to the assets we are showing.
    PHFetchResultChangeDetails *collectionChanges = [changeInstance changeDetailsForFetchResult:self.selectedResult];
    if (collectionChanges == nil) {
        return;
    }
    self.selectedResult = [collectionChanges fetchResultAfterChanges];
    [self showAllPhotosInResult:self.selectedResult];
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        //刷新相机胶卷相册
        AlbumModel *album = self.albums[0];
        album.albumName = @"相机胶卷";
        album.photoCount = self.selectedResult.count;
        album.fetchResult = self.selectedResult;
        
        PHImageRequestOptions *imgReqOptions = [[PHImageRequestOptions alloc] init];
        imgReqOptions.deliveryMode = PHImageRequestOptionsDeliveryModeFastFormat;
        [self requestImageAtIndex:0 forRequest:self.selectedResult targetSize:AssetGridThumbnailSize contentMode:PHImageContentModeAspectFill options:imgReqOptions requestHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) {
            album.postImage = result;
            dispatch_async(dispatch_get_main_queue(), ^{
                [self.albumList.tableView reloadData];
            });
        }];
    });
    dispatch_async(dispatch_get_main_queue(), ^{
        [self showAllPhotosInResult:self.selectedResult];
        [self.collectionView reloadData];
    });
}

@end
